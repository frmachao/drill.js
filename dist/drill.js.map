{"version":3,"sources":["../src/drill.js"],"names":[],"mappings":"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","file":"drill.js","sourcesContent":["((glo) => {\n    \"use strict\";\n    //common\n    const Docum = document;\n    const windowHead = Docum.head;\n\n    const\n    //模块处理中 \n        PENDING = \"pending\",\n        //模块加载成功\n        RESOLVED = \"resolved\",\n        //模块加载失败\n        REJECTED = \"rejected\",\n        //js加载完成，但是模块定义未完成\n        LOADED = \"loaded\";\n\n    //映射资源\n    var paths = {};\n\n    //映射目录\n    var dirpaths = {};\n\n    //载入模块用的map对象\n    var dataMap = {};\n\n    //基础数据对象\n    var baseResources = {\n        paths: paths,\n        dirpaths: dirpaths,\n        //js模块相对路径\n        baseUrl: \"\",\n        dataMap: dataMap,\n        //临时挂起的模块对象\n        tempM: {}\n    };\n\n    //function\n    //转换成array类型\n    var arrayslice = Array.prototype.slice;\n    var makeArray = arrobj => arrayslice.call(arrobj);\n\n    //获取类型\n    var objectToString = Object.prototype.toString;\n    var getType = value => objectToString.call(value).toLowerCase().replace(/(\\[object )|(])/g, '');\n\n    //array类型的遍历\n    var arrayEach = (arr, func) => {\n        !(arr instanceof Array) && (arr = makeArray(arr));\n        arr.some((e, i) => func(e, i) === false);\n        return arr;\n    };\n\n    //获取目录名\n    var getDir = url => {\n        let urlArr = url.match(/(.+\\/).+/);\n        return urlArr && urlArr[1];\n    };\n\n    //修正字符串路径\n    var removeParentPath = (url) => {\n        let urlArr = url.split(/\\//g);\n        let newArr = [];\n        arrayEach(urlArr, (e) => {\n            if (e == '..' && newArr.length && (newArr.slice(-1)[0] != \"..\")) {\n                newArr.pop();\n                return;\n            }\n            newArr.push(e);\n        });\n        return newArr.join('/');\n    };\n\n    //改良异步方法\n    var nextTick = (() => {\n        let isTick = false;\n        let nextTickArr = [];\n        return (fun) => {\n            if (!isTick) {\n                isTick = true;\n                setTimeout(() => {\n                    for (let i = 0; i < nextTickArr.length; i++) {\n                        nextTickArr[i]();\n                    }\n                    nextTickArr = [];\n                    isTick = false;\n                }, 0);\n            }\n            nextTickArr.push(fun);\n        };\n    })();\n\n    //是否空对象\n    var isEmptyObj = (obj) => {\n        for (let i in obj) {\n            return 0;\n        }\n        return 1;\n    }\n\n    //是否undefined\n    var isUndefined = val => val === undefined;\n\n    //返回Promise实例\n    var promise = func => new Promise(func);\n\n    // 拆分参数和真实地址\n    var split_drill_param = url => {\n        var sarr = url.split(\" \");\n        return [sarr[0], sarr.slice(1)];\n    };\n\n    // 还原参数和真实地址\n    var reduce_drill_param = (url, paramsArr) => {\n        var narr = paramsArr.slice();\n        narr.unshift(url);\n        return narr.join(\" \");\n    }\n\n    //main\n    //主业务逻辑\n    var R = {\n        //加载script的方法\n        loadScript: url => {\n            [url, ] = split_drill_param(url);\n            let script = Docum.createElement('script');\n\n            //判断版本号\n            let { k, v } = drill.cacheInfo;\n            if (url && k && v) {\n                if (url.search(/\\?/) > -1) {\n                    url += \"&\" + k + \"=\" + v;\n                } else {\n                    url += \"?\" + k + \"=\" + v;\n                }\n            }\n\n            //填充相应数据\n            script.type = 'text/javascript';\n            script.async = true;\n            url && (script.src = url);\n\n            //ie10对 async支持差的修正方案\n            nextTick(() => {\n                windowHead.appendChild(script);\n            });\n\n            return script;\n        },\n        //载入单个资源的代理方法\n        agent: (path, pubData) => promise((res, rej) => {\n            let param;\n            [path, param] = split_drill_param(path);\n            let tar = dataMap[path];\n            if (tar) {\n                switch (tar.state) {\n                    case LOADED:\n                    case PENDING:\n                        tar.c.push({\n                            res,\n                            pubData\n                        });\n                        break;\n                    case RESOLVED:\n                        nextTick(() => {\n                            if (tar.get) {\n                                tar.get((data) => {\n                                    res(data);\n                                }, pubData);\n                            } else {\n                                res();\n                            }\n                        });\n                        break;\n                    case REJECTED:\n                        nextTick(() => {\n                            rej();\n                        });\n                        break;\n                }\n            } else {\n                dataMap[path] = tar = {\n                    //模块类型\n                    // type: \"file\",\n                    state: PENDING,\n                    c: [{\n                        res,\n                        rej,\n                        pubData\n                    }]\n                };\n\n                // 还原回去\n                path = reduce_drill_param(path, param);\n\n                let script = R.loadScript(path);\n\n                script.onload = () => {\n                    tar.state = LOADED;\n                    R.setTemp(path);\n                    baseResources.tempM = {};\n                };\n                script.onerror = () => {\n                    while (0 in tar.c) {\n                        tar.c.shift().rej('load script error => ' + path);\n                    }\n                    baseResources.tempM = {};\n                    tar.state = REJECTED;\n                    delete tar.c;\n                }\n            }\n        }),\n        //根据数组内的路径进行封装返回Promise对象\n        toProm: (args, pubData) => {\n            let pendFun;\n\n            let pms = promise((res, rej) => {\n                let arr = [];\n                let len = args.length;\n\n                //确认返回数据的方法\n                let monitFun = () => {\n                    len--;\n                    if (!len) {\n                        pendFun = null;\n                        if (arr.length == 1) {\n                            res(arr[0]);\n                        } else {\n                            res(arr);\n                        };\n                    }\n                };\n\n                arrayEach(args, (e, i) => {\n                    //获取实际路径\n                    let path = R.getPath(e, pubData);\n\n                    //获取promise模块\n                    let p = R.agent(path, pubData);\n\n                    p.then((data) => {\n                        arr[i] = data;\n                        pendFun && pendFun(data, i);\n                        monitFun();\n                    }).catch((err) => {\n                        rej(err);\n                    });\n                });\n            });\n\n            //加入pend事件\n            pms.pend = (func) => {\n                pendFun = func;\n                return pms;\n            };\n\n            return pms;\n        },\n        // 设定默认文件类型\n        // 默认支持的 普通js文件（file），define模块，task进程\n        setTemp: path => {\n            [path, ] = split_drill_param(path);\n            //获取模块数据\n            let { tempM } = baseResources;\n            let data = tempM.d;\n            let { ids } = tempM;\n\n            //查看是否有设定ids\n            (ids && getType(ids) == \"string\") && (ids = [ids]);\n\n            let tar = dataMap[path];\n\n            //默认模块为普通文件类型\n            let type = tar.type = (tempM.type || \"file\");\n\n            //判断是否有自定义id\n            if (ids) {\n                arrayEach(ids, (e) => {\n                    dataMap[e] = tar;\n                });\n            }\n\n            //运行成功\n            let runFunc = d => {\n                //响应队列resolve函数\n                while (0 in tar.c) {\n                    tar.c.shift().res(d);\n                }\n\n                //设置返回数据的方法\n                tar.get = (callback) => {\n                    callback(d);\n                };\n\n                //设置完成\n                tar.state = RESOLVED;\n\n                //清除无用数据\n                delete tar.c;\n            }\n\n            //根据类型做不同的处理\n            switch (type) {\n                //普通文件类型\n                case \"file\":\n                    runFunc();\n                    break;\n                    //模块类型\n                case \"define\":\n                    //判断是否是函数\n                    if (getType(data).search('function') > -1) {\n                        let exports = {},\n                            module = {\n                                exports: exports\n                            };\n\n                        //判断返回值是否promise\n                        let p = data(function(...args) {\n                            return R.require(args, {\n                                rel: path\n                            });\n                        }, exports, module, {\n                            FILE: path\n                        });\n\n                        if (p instanceof Promise) {\n                            p.then((d) => {\n                                if (isUndefined(d) && getType(module.exports) == \"object\" && !isEmptyObj(module.exports)) {\n                                    d = module.exports;\n                                }\n                                runFunc(d);\n                            });\n                        } else {\n                            //数据类型\n                            runFunc(p);\n                        }\n                    } else {\n                        runFunc(data);\n                    }\n                    break;\n                    //任务类型\n                case \"task\":\n                    runFunc = null;\n                    //设定数据值\n                    if (getType(data).search('function') > -1) {\n                        let getFun = tar.get = (res, pubData) => {\n                            let p = data(function(...args) {\n                                return R.require(args, {\n                                    rel: path\n                                });\n                            }, pubData.pdata, {\n                                FILE: path\n                            });\n                            p.then((d) => {\n                                res(d);\n                            });\n                        };\n\n                        //响应队列resolve函数\n                        while (0 in tar.c) {\n                            let {\n                                res,\n                                pubData\n                            } = tar.c.shift();\n                            getFun(res, pubData);\n                        }\n                    } else {\n                        throw 'task module type error';\n                    }\n\n                    //设置完成\n                    tar.state = RESOLVED;\n\n                    //清除无用数据\n                    delete tar.c;\n                    break;\n            };\n        },\n        //转换路径\n        getPath: (target, pubData) => {\n            // 拆分参数和值\n            let param;\n            [target, param] = split_drill_param(target);\n\n            let relatePath = pubData.rel;\n            //判断是否已经注册了路径\n            if (paths[target]) {\n                target = paths[target];\n            } else {\n                let tarreg;\n                //判断是否注册目录\n                for (let i in dirpaths) {\n                    tarreg = new RegExp('^' + i);\n                    if (tarreg.test(target)) {\n                        target = target.replace(tarreg, dirpaths[i]);\n                        break\n                    }\n                }\n            }\n\n            //判断是否带协议头部\n            //没有协议\n            if (!/^.+?\\/\\//.test(target)) {\n                //是否带参数\n                if (!/\\?.+$/.test(target) && !/.js$/.test(target)) {\n                    //没有js的话加上js后缀\n                    target += \".js\";\n                }\n\n                //判断是否有相对路径字样\n                let rePath = target.match(/^\\.\\/(.+)/);\n                if (rePath) {\n                    //获取相对目录\n                    target = getDir(relatePath) + rePath[1];\n                } else {\n                    // 判断是否有 -r(root)参数\n                    if (param.indexOf('-r') == -1) {\n                        //加上根目录\n                        target = baseResources.baseUrl + target;\n                    }\n                }\n\n                //去除相对上级目录\n                target = removeParentPath(target);\n            }\n\n            //还原参数和值\n            target = reduce_drill_param(target, param);\n            return target;\n        },\n        //引用模块\n        require: (args, pubData = {}) => {\n            let p = R.toProm(args, pubData);\n\n            //添加post方法\n            p.post = (data) => {\n                pubData.pdata = data;\n                return p;\n            }\n            return p;\n        },\n        //定义模块\n        define: (d, ids) => {\n            baseResources.tempM = {\n                type: \"define\",\n                d: d,\n                ids: ids\n            };\n        },\n        //定义进程\n        task: (d, ids) => {\n            baseResources.tempM = {\n                type: \"task\",\n                d: d,\n                ids: ids\n            };\n        }\n    };\n\n    //主体require\n    var require = (...args) => {\n        return R.require(args);\n    };\n    var oDefine = (d, ids) => {\n        R.define(d, ids);\n    };\n    var oTask = (d, ids) => {\n        R.task(d, ids);\n    }\n\n    var drill = {\n        config: data => {\n            //配置baseurl\n            baseResources.baseUrl = data.baseUrl || baseResources.baseUrl;\n\n            //配置paths\n            for (let i in data.paths) {\n                if (/\\/$/.test(i)) {\n                    //属于目录类型\n                    dirpaths[i] = data.paths[i];\n                } else {\n                    //属于资源类型\n                    paths[i] = data.paths[i];\n                }\n            }\n        },\n        remove: url => {\n            //获取路径\n            let path = R.getPath(url, {});\n\n            //获取寄存对象\n            let tarData = dataMap[path];\n\n            if (tarData) {\n                delete dataMap[path];\n                //告示删除成功\n                return true;\n            }\n        },\n        //扩展函数\n        extend: option => {\n            option(baseResources, R);\n        },\n        require: require,\n        define: oDefine,\n        task: oTask,\n        //缓存版本号\n        cacheInfo: {\n            k: \"srcache\"\n                //, v: \"\"\n        }\n    };\n\n    //init\n    // 初始化版本号\n    let cScript = Docum.currentScript;\n    if (!cScript) {\n        cScript = Docum.querySelector(['drill-cache']);\n    }\n    if (cScript) {\n        let cacheVersion = cScript.getAttribute('drill-cache');\n        cacheVersion && (drill.cacheInfo.v = cacheVersion);\n    }\n\n    // 外部使用的变量\n    glo.require || (glo.require = require);\n    glo.define || (glo.define = oDefine);\n    glo.task || (glo.task = oTask);\n    if (glo.drill) {\n        if (getType(glo.drill)) {\n            glo.drill(drill);\n        } else {\n            throw \"async drill.js type error\";\n        }\n    }\n    glo.drill = drill;\n\n    window.baseResources = baseResources;\n\n})(window);"]}